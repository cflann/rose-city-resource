<%- include('./partials/head'); %>
<%- include ('./partials/navbar'); %>
<%- include('./partials/styles'); %>
<head>
  <script>

    async function fetchPgRows() {
      let data = await fetch('dashboard/pg-rows')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchPgSpace() {
      let data = await fetch('dashboard/pg-space')
        .catch(e => console.error(e))
      return await data == undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchLastUpdate() {
      let data = await fetch('/api/meta-information')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchEtlLogs() {
      let logs = await fetch('dashboard/etl-log')
        .catch(e => console.error(e))
      return await logs === undefined ? '' : logs.json().catch(e => console.error(e));
    }

    function renderEtlLogs(logs) {
      if (logs == null) {
        return;
      }
      let div = document.getElementById('etl-log');
      div.innerHTML =
        logs.map(L => {
          let dt = new Date(L.time_stamp);
          return '<tr><td style="color: navy; min-width: 150px; border: none; padding:4">' + dt.toLocaleString() + '</td><td style="color:blue; border: none; padding:4;">' + L.message + '</td></tr>'
        }).join('')
    }

    async function fetchEtlStatus() {
      const status = await fetch('dashboard/etl-status')
        .catch(e => console.error(e));
      return await status === undefined ? '' : status.json().catch(e => console.error(e));
    }

    function renderEtlStatus(status) {
      if (status == null) {
        return;
      }
      let div = document.getElementById('etl-status');
      if (status.etl_started.toLowerCase() === 'false') {
        /* Has NOT started */
        div.innerHTML = "<span>&nbsp;</span>"
      }
      else {
        /* HAS started */
        if (status.etl_ran_to_completion.toLowerCase() === 'false') {
          /* Has NOT completed */
          div.innerHTML = '<span>The Import to Preview process has started. Please allow up to 30 minutes for the process to complete.</span>';
        }
        else if (status.etl_ran_to_completion.toLowerCase() === 'true') {
          /* HAS completed */
          if (parseInt(status.minutes_since_last_log) > 60 * 48) {
            /* More than 24 hours ago */
            div.innerHTML = "<span>The Import to Preview process ran more than 48 hours ago. Please run it again, since the source data may have changed.</span>";
          }
          else {
            /* Less than 24 hours ago */
            if (parseInt(status.etl_staging_1_num_rows) < 1) {
              /* The staging table is empty */
              div.innerHTML = "<span>The preview data is empty. Please report this to the development team.</span>";
            }
            else {
              div.innerHTML = "<span style='font-size: 20px; font-family: 'Courier New', Courier, monospace;'>The preview data is imported successfully and is ready to be imported to the live site.</span>";
            }
          }
        }
      }

    }

    async function fetchDataValidationItems() {
      const data = await fetch('dashboard/etl-validation')
        .catch(e => console.error(e));
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    function renderValidationItems(items) {
      if (items == null) {
        return;
      }
      let div = document.getElementById('etl-validation');
      div.innerHTML =
        items.map(L => {
          return '<tr><td style="color: navy; white-space: nowrap; border: none; padding:4">' + L.test + '</td><td style="color:blue; border: none; padding:4;">' + L.details + '</td><td style="color:blue; border: none; padding:4;">' + L.id + '</td><td style="color:blue; border: none; padding:4;">' + L.listing + '</td></tr>'
        }).join('')
    }

    async function staging() {

      /* Prompt for confirmation */
      let confirmation = confirm("Import data to preview site?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to run import process...';

      /* Safety check to abort if ETL is in progress */
      const logs = await fetchEtlLogs();
      const hasStartMessage = (logs.filter(i => i.message === 'Python ETL Script Start')).length >= 1;
      const hasEndMessage = (logs.filter(i => i.message === 'Python ETL Script End')).length >= 1;
      if (hasStartMessage && !hasEndMessage) {
        document.getElementById('status').innerText = 'There is already an import in progress. Please allow up to 30 minutes for that process to complete.';
      }

      /* Trigger the ETL process to start */
      fetch('?' + new URLSearchParams({ action: 'runetl' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerText = 'Failed to start import process'; })

      /* Query the server for ETL status on an interval */
      const stagingInterval = window.setInterval(async function () {

        /* Fetch and display ETL logs */
        const logs = await fetchEtlLogs();
        renderEtlLogs(logs);

        /* Update the status message */
        const jobStart = logs.filter(L => L.message === 'Job Start');
        const jobEnd = logs.filter(L => L.message === 'Python ETL Script End');
        const stagingFinalized = logs.filter(L => L.message === 'Finalize the staging table');
        if (stagingFinalized && stagingFinalized.length >= 1) {
          const items = await fetchDataValidationItems();
          renderValidationItems(items)
        }
        if (jobStart && jobStart.length >= 1) {
          document.getElementById('status').innerHTML = 'Import process is running...';
        }
        if (jobEnd && jobEnd.length >= 1) {
          const previewPage = [window.location.protocol, '//', window.location.host.replace(/\d+/, '3000'), '?datatable=staging'].join('');
          document.getElementById('preview-link').innerHTML = '<span>&#10004;&nbsp;Successfully imported to the Preview Site!</span><br/> <a href="' + previewPage + '"target="_blank">Click here to view Preview Site</a>';
          clearInterval(stagingInterval);
        }
      }, 4000)

    }

    async function production() {

      /* Prompt for confirmation */
      let confirmation = confirm("The LIVE SITE will be updated. Proceed?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to update production...';

      /* Trigger the production udpate process to start */
      const status = await fetch('?' + new URLSearchParams({ action: 'runprod' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerHTML = '<span>&#10008;&nbsp;Failed to start import process</span>'; })

      /* Query the server for status on an interval */
      const prodInterval = window.setInterval(async function () {

        /* Check if the production table has been updated */
        let timestamp = await fetchLastUpdate();
        let friendlyTimestamp = new Date(timestamp).toLocaleString();
        document.getElementById('-time').innerText = friendlyTimestamp;

        /* Compare to see if this time is within 2 minutes of the current time */
        const currentTime = new Date(new Date().toISOString());
        const updatedTime = new Date(new Date(timestamp).toISOString());
        const minutesBetweenDates = (currentTime.getTime() - updatedTime.getTime()) / 60000;
        if (minutesBetweenDates < 2) {
          document.getElementById('status').innerHTML = "<span>&#10004;&nbsp;Successfully imported to the Live Site!</span>";
          clearInterval(prodInterval);
        }
      }, 2000)

    }
  </script>
  <style>
    #data-header {
      display: flex; 
      justify-content: space-between;
      align-items: center;
      margin: 5px 3em;
    }

    #data-header h1 {
      align-self: flex-end;
      text-align: left;
    }

    #dashboard h2 {
      font-size: 1.5em;
      margin: .5em;
      margin-top: 0;
    }

    #dashboard header {
      display: flex; 
      justify-content: center; 
      align-items: center; 
      margin-bottom: 1em;
    }

    #dashboard #page {
      display: flex; 
      align-items: flex-start;
    }

    #dashboard nav {
      border-radius: 5px; 
      width: 175px;
    }

    #dashboard #update-div {
      border-radius: 5px; 
      margin: auto; 
      max-width: 375px;
      padding: 10px 20px;
    }

    #dashboard #instructions-main {
      padding-top: 0; 
      margin-top: 0; 
      width: 100%; 
      min-height: 75vh;
    }

    /* divs that hold the instructions  */
    #dashboard .inner-content {
      max-width: 650px; 
      margin-top: 1em; 
      margin-bottom: .5em;
    }

    #dashboard li {
      margin: .25em;
      line-height: 1.25em;
    }

    .strong {
      font-weight: bold;
    }

    #dashboard .instruction-div {
      display: flex; 
      flex-direction: column; 
      justify-content: center;
      align-items: center;
    }

    #dashboard button {
      max-width: 350px;
    }

    #dashboard details {
      align-self: flex-start;
    }

    #logs table {
      margin-left: auto; 
      margin-right: auto; 
      font-size: 14px; 
      font-family: monospace; 
      border-spacing: 10px 0;
    }

  </style>
</head>
<body>

  <div class='container' style="margin: 1em;" id="dashboard">

    <!-- header content -->
    <header>
      <h1
        class="ui header violet" style="margin: .5em; margin-bottom: 1em">
        <div class="content">
          <i class="sync icon"></i>
          Update Website Data
          <div class="sub header">
            Need more  help? Check out the <a href="/admin/guide"> user guide!</a>
          </div>
        </div>
      </h1>

      <div id="update-div" class="ui segment">
        <div><em>Live Site Last Update: <span id='last-update-time'>&nbsp;</span></em></div>
        <div><span>Database Rows in Use: </span><span id='database-rows'>&nbsp;</span><span> / 10,000</span></div>
        <div><span>Database Space in Use: </span><span id='database-space'>&nbsp;</span><span> / 1 GB</span></div>
      </div>
    </header>

  <div id="page">
    <!-- navbar  -->
    <nav class="sidebar" style="position: sticky; top: 25vh">
      <div class="ui vertical attached pointing menu">
        <a class="active item" href="#instructions">
          Overview
        </a>
        <a class="item" href="#step-1">
          1. Import Data
        </a>
        <a class="item" href="#step-2">
          2. Preview
        </a>
        <a class="item" href="#step-3">
          3. Update Site
        </a>
      </div> 
    </nav>

    <!-- ALL main content goes here  -->
    <div class="ui attached segment" id="instructions-main">

      <!-- OVERVIEW  -->
      <div class="instruction-div" id="instructions">
        <div class="inner-content">

        <h2>Overview</h2>

        <div class="ui message">
          <p class="strong">
            Before beginning the update process, ensure that all data on Airtable is complete and correct.
          </p>
          <p>
            Updating the RCR website data is a three part process.
          </p>
          <p>
            This guide will walk you through each step. 
          </p>
          <p>
            If you run into errors with the import process, contact your technical support person.
          </p> 
        </div>

        </div>
      <!-- end overview  -->
      </div>

      <div class="ui divider"></div>

      <!-- STEP 1: IMPORT  -->
      <div class="instruction-div" id="step-1">
        <div class="inner-content" style="display: flex; flex-direction: column; align-items: center;">

          <h2>Import Data</h2>

          <div class="ui message">
            <div class="header">
              Step 1: Import Data from Airtable (5 minutes)
            </div>

            <ol class="ui list">
              <li>Click "Import Data to Preview Site"</li>
              <li>Wait for the process to complete (about 5 minutes)</li>
              <li class="strong">If you see an error message in "Data Logs," copy the message and email it to your support contact</li>
              <li>When the process is done, a message will appear with next steps

              </li>
            </ol>
          </div>
          <!-- IMPORT BUTTON  -->
          <button class="ui button violet"
            onclick='staging()'>
            Import Data to Preview Site
          </button>
          <br />

        <!-- import progress info div  -->
          <div class="preview-div" style="margin-bottom: 1em;">
            <span class="preview-span" id='status'>

            </span>
          </div>
          <!-- etl status  -->
          <div id='etl-status' style='color:gray; border: 1px dashed lightgray; width: 100%; margin-bottom: 1em;'>&nbsp;
          </div>

          <br />
          <div id="logs">
            <details open>
              <summary>Data Validation Errors</summary>
              <table cellpadding='0' cellspacing='0'>
                <tbody id='etl-validation'></tbody>
              </table>
            </details>
            <br>
            <details open>
              <summary>Logs</summary>
              <table cellpadding='0' cellspacing='0'>
                <tbody id='etl-log'></tbody>
              </table>
            </details>
          </div>

        </div>
      <!-- end import div  -->
      </div>
      
      <div class="ui divider"></div>
  
      <!-- STEP 2: PREVIEW  -->
      <div class="instruction-div" id="step-2">
        <div class="inner-content" 
          style="display: flex; flex-direction: column; align-items: center;">
          <h2>Preview Test Site</h2>
          <em>
            Note: You must successfully complete Step One for this to work
          </em>

          <!-- preview instructions  -->
          <div class="ui message">
            <ol class="ui list">
              <li>
                Click "Preview Site"
                <ol class="spaced">
                  <li value="+">
                    You will be taken to a temporary version of RCR that displays the data you just imported from Airtable.
                  </li>
                  <li value="+">
                    The preview site shows <em>exactly</em> how the the final site will look, if you continue with the update process
                  </li>
                  <li value="+">
                    We recommend the site by performing searches and making sure you get the results that you expect
                  </li>
                </ol> 
                </li>
              </li>
              <!-- "fixing data validation errors" -->
              <!-- commented out for simplicity's sake  -->
              <!-- <li>
                <details closed>
                  <summary>
                    Review "Content Errors"
                  </summary>
                  <div>
                    <ol class="spaced">
                      <li value="-">
                        If the automatic import process detected missing data fields, they will show up in the "Content Errors" section
                      </li>
                      <li value="-" class="strong">
                        Fixing these errors is optional. You can still update the site.
                      </li>
                      <li value="-">
                        To fix content errors:
                        <ol>
                          <li value="-">
                            Go to Airtable and correct the data where indicated
                          </li>
                          <li value="-">
                            Go back to the "Import Data" step on this dashboard
                          </li>
                          <li value="-">
                            Follow the instructions to re-import the newly changed data 
                          </li>
                        </ol>
                      </li>
                  </ol> 
                </div>
              </details>
              </li> -->
              <li class="strong">
                If anything looks incorrect, correct the data on Airtable and start the import process again
              </li>
              <li>
                If you are satisfied with the preview site, continue to the next step
              </li>
            </ol>
          </div>

          <!-- SITE PREVIEW LINK -->
          <div class="preview-div" style="margin-bottom: 1em; font-size: 1.5em; font-weight: bold;">
            <span class="preview-link">
              <!-- SITE PREVIEW LINK APPEARS HERE ONCE ETL PROCESS IS COMPLETE -->
            </span>
          </div>
        </div>
      <!-- end preview section  -->
      </div>

      <div class="ui divider"></div>

      <!-- LIVE -->
      <div class="instruction-div" id="step-3">
        <div class="inner-content" 
          style="display: flex; flex-direction: column; align-items: center;">
          <h2>Update Live Site</h2>

          <button class="ui button teal disabled" 
            id='import-live'   
            onclick='production()'>
            Import Data to Live Site
          </button>
        
        </div>
      <!-- end instructions div -->
      </div>
    </div>
  </div>
  <!-- end page div  -->
</div>
<script>
  (async () => {
    /* One-time Updates on page load */

    /* Fetch and display ETL logs */
    renderEtlLogs(await fetchEtlLogs());

    const rowsRes = await fetchPgRows();
    const rows = rowsRes[0].get_database_numrows;
    const spaceRes = await fetchPgSpace();
    const space = spaceRes[0].get_database_size;
    const timeRes = await fetchLastUpdate();
    const time = new Date(timeRes.last_update).toLocaleString();
    console.log(time, timeRes)
    document.getElementById('database-rows').innerText = rows;
    document.getElementById('database-space').innerText = space;
    document.getElementById('last-update-time').innerText = time;

    /* Continuous update on timer */
    window.setInterval(async function () {

      /* Fetch and display ETL status */
      const statusArr = await fetchEtlStatus();
      const status = statusArr[0];
      renderEtlStatus(status);

      /* Enable import to live site button if that should be an option */
      const started = status.etl_started.toLowerCase();
      const completed = status.etl_ran_to_completion.toLowerCase();
      const minutes = parseInt(status.minutes_since_last_log);
      const numrows = parseInt(status.etl_staging_1_num_rows);
      if (started === 'true' && completed === 'true' && minutes < 60 * 48 && numrows > 1) {
        const button = document.getElementById('import-live').removeClass('disabled')
      }
      else {
        const button = document.getElementById('import-live').addClass('disabled')
      }

    }, 5000)
  })();

  // semantic jQuery for side navbar 
  $('.ui .item').on('click', function() {
      $('.ui .item').removeClass('active');
      $(this).addClass('active');
   }); 

</script>
</body>