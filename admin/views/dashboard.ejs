<%- include('./partials/head'); %>
<%- include ('./partials/navbar'); %>
<%- include('./partials/styles'); %>

<!-- icon options: question circle outline, info circle
  -->

<head>
  <script>

    async function fetchPgRows() {
      let data = await fetch(window.location.href + '/pg-rows')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchPgSpace() {
      let data = await fetch(window.location.href + '/pg-space')
        .catch(e => console.error(e))
      return await data == undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchLastUpdate() {
      let data = await fetch('/api/meta-information')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchEtlLogs() {
      let logs = await fetch(window.location.href + '/etl-log')
        .catch(e => console.error(e))
      return await logs === undefined ? '' : logs.json().catch(e => console.error(e));
    }

    function renderEtlLogs(logs) {
      if (logs == null) {
        return;
      }
      let div = document.getElementById('etl-log');
      div.innerHTML =
        logs.map(L => {
          let dt = new Date(L.time_stamp);
          return '<tr><td style="color: navy; min-width: 150px; border: none; padding:4">' + dt.toLocaleString() + '</td><td style="color:blue; border: none; padding:4;">' + L.message + '</td></tr>'
        }).join('')
    }

    async function fetchEtlStatus() {
      const status = await fetch(window.location.href + '/etl-status')
        .catch(e => console.error(e));
      return await status === undefined ? '' : status.json().catch(e => console.error(e));
    }

    function renderEtlStatus(status) {
      if (status == null) {
        return;
      }
      let div = document.getElementById('etl-status');
      if (status.etl_started.toLowerCase() === 'false') {
        /* Has NOT started */
        div.innerHTML = "<span>&nbsp;</span>"
      }
      else {
        /* HAS started */
        if (status.etl_ran_to_completion.toLowerCase() === 'false') {
          /* Has NOT completed */
          div.innerHTML = '<span>The Import to Preview process has started. Please allow up to 30 minutes for the process to complete.</span>';
        }
        else if (status.etl_ran_to_completion.toLowerCase() === 'true') {
          /* HAS completed */
          if (parseInt(status.minutes_since_last_log) > 60 * 48) {
            /* More than 24 hours ago */
            div.innerHTML = "<span>The Import to Preview process ran more than 48 hours ago. Please run it again, since the source data may have changed.</span>";
          }
          else {
            /* Less than 24 hours ago */
            if (parseInt(status.etl_staging_1_num_rows) < 1) {
              /* The staging table is empty */
              div.innerHTML = "<span>The preview data is empty. Please report this to the development team.</span>";
            }
            else {
              div.innerHTML = "<span style='font-size: 20px; font-family: 'Courier New', Courier, monospace;'>The preview data is imported successfully and is ready to be imported to the live site.</span>";
            }
          }
        }
      }

    }

    async function fetchDataValidationItems() {
      const data = await fetch(window.location.href + '/etl-validation')
        .catch(e => console.error(e));
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    function renderValidationItems(items) {
      if (items == null) {
        return;
      }
      let div = document.getElementById('etl-validation');
      div.innerHTML =
        items.map(L => {
          return '<tr><td style="color: navy; white-space: nowrap; border: none; padding:4">' + L.test + '</td><td style="color:blue; border: none; padding:4;">' + L.details + '</td><td style="color:blue; border: none; padding:4;">' + L.id + '</td><td style="color:blue; border: none; padding:4;">' + L.listing + '</td></tr>'
        }).join('')
    }

    async function staging() {

      /* Prompt for confirmation */
      let confirmation = confirm("Import data to preview site?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to run import process...';

      /* Safety check to abort if ETL is in progress */
      const logs = await fetchEtlLogs();
      const hasStartMessage = (logs.filter(i => i.message === 'Python ETL Script Start')).length >= 1;
      const hasEndMessage = (logs.filter(i => i.message === 'Python ETL Script End')).length >= 1;
      if (hasStartMessage && !hasEndMessage) {
        document.getElementById('status').innerText = 'There is already an import in progress. Please allow up to 30 minutes for that process to complete.';
      }

      /* Trigger the ETL process to start */
      fetch(window.location.href + '?' + new URLSearchParams({ action: 'runetl' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerText = 'Failed to start import process'; })

      /* Query the server for ETL status on an interval */
      const stagingInterval = window.setInterval(async function () {

        /* Fetch and display ETL logs */
        const logs = await fetchEtlLogs();
        renderEtlLogs(logs);

        /* Update the status message */
        const jobStart = logs.filter(L => L.message === 'Job Start');
        const jobEnd = logs.filter(L => L.message === 'Python ETL Script End');
        const stagingFinalized = logs.filter(L => L.message === 'Finalize the staging table');
        if (stagingFinalized && stagingFinalized.length >= 1) {
          const items = await fetchDataValidationItems();
          renderValidationItems(items)
        }
        if (jobStart && jobStart.length >= 1) {
          document.getElementById('status').innerHTML = 'Import process is running...';
        }
        if (jobEnd && jobEnd.length >= 1) {
          const previewPage = [window.location.protocol, '//', window.location.host.replace(/\d+/, '3000'), '?datatable=staging'].join('');
          document.getElementById('status').innerHTML = '<span>&#10004;&nbsp;Successfully imported to the Preview Site!</span><br/> <a href="' + previewPage + '"target="_blank">Click to View Preview Site</a>';
          clearInterval(stagingInterval);
        }
      }, 4000)

    }

    async function production() {

      /* Prompt for confirmation */
      let confirmation = confirm("The LIVE SITE will be updated. Proceed?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to update production...';

      /* Trigger the production udpate process to start */
      const status = await fetch(window.location.href + '?' + new URLSearchParams({ action: 'runprod' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerHTML = '<span>&#10008;&nbsp;Failed to start import process</span>'; })

      /* Query the server for status on an interval */
      const prodInterval = window.setInterval(async function () {

        /* Check if the production table has been updated */
        let timestamp = await fetchLastUpdate();
        let friendlyTimestamp = new Date(timestamp).toLocaleString();
        document.getElementById('-time').innerText = friendlyTimestamp;

        /* Compare to see if this time is within 2 minutes of the current time */
        const currentTime = new Date(new Date().toISOString());
        const updatedTime = new Date(new Date(timestamp).toISOString());
        const minutesBetweenDates = (currentTime.getTime() - updatedTime.getTime()) / 60000;
        if (minutesBetweenDates < 2) {
          document.getElementById('status').innerHTML = "<span>&#10004;&nbsp;Successfully imported to the Live Site!</span>";
          clearInterval(prodInterval);
        }
      }, 2000)

    }

  </script>
  <style>
  .strong {
    font-weight: bold;
  }
  
  .spaced li {
    margin-bottom: .25em;
  }

  #data-header {
    display: flex; 
    justify-content: space-between;
    align-items: center;
    margin: 5px 3em;
  }

  #data-header h1 {
    align-self: flex-end;
    text-align: left;
  }

  </style>
</head>

<body class='container' id="dashboard">
  <% 
    
  let activeStep = "step-1";
  let completedSteps = [];
  let disabledSteps = ["step-2", "step-3"];

  %>
  <header>
    <div id="data-header">

    <h1 class="ui header violet">
      <div class="content">
        <i class="sync icon"></i>
        Update Data
      </div>
      <div class="sub header">
        Need more  help? Check out the <a href="/admin/guide"> user guide!</a>
      </div>
    </h1>
    <div class="ui segment" style="padding: 10px">
      <div><em>Live Site Last Update: <span id='last-update-time'>&nbsp;</span></em></div>
      <div><span>Database Rows in Use: </span><span id='database-rows'>&nbsp;</span><span> / 10,000</span></div>
      <div><span>Database Space in Use: </span><span id='database-space'>&nbsp;</span><span> / 1 GB</span></div>
    </div>
  </div>
 </header>

  <main>

  <div class="ui attached steps">

    <!-- upload  -->
    <div id="step-1" onclick="onStepClick(this.id)"
      class="step <%= activeStep === 'step-1' ? 'active' : '' %>">
      <i class="cloud upload icon"></i>
      <div class="content">
        <div class="title">Import Data</div>
        <div class="description"></div>
      </div>
    </div>
    <div id="step-2" onclick="onStepClick(this.id)"
      class="step 
      <%= activeStep === 'step-2' ? 'active' : '' %> 
      <%= disabledSteps.includes('step-2') ? 'disabled' : ''%> 
      <%= completedSteps.includes('step-2') ? 'completed' : ''%>">
      <i class="eye icon"></i>
      <div class="content">
        <div class="title">Preview Site</div>
      </div>
    </div>
    <div id="step-3" onclick="onStepClick(this.id)"
      class="step 
      <%= activeStep === 'step-3' ? 'active' : '' %> 
      <%= disabledSteps.includes('step-3') ? 'disabled' : ''%> 
      <%= completedSteps.includes('step-3') ? 'completed' : ''%>">
      <i class="sync icon"></i>
      <div class="content">
        <div class="title">Update Site</div>
      </div>
    </div>
  </div>

  <!-- step 1 content  -->
  <section id="step-1-content" class="hidden">
    <!-- step 1 instructions  -->
    <div class="ui attached message">

      <div class="header">
        Step 1: Import Data from Airtable
      </div>
      <em>
        Note: The import process takes 5 minutes
      </em>

      <ol class="ui list">
        <li>Click "Import Data to Preview Site"</li>
        <!-- <li>The Airtable data will be imported to a preview site, which you can review in the next step</li> -->
        <li class="strong">If you get an error message, copy the message and email it to your support contact</li>
        <li>When the process is done, a message will appear with next steps</li>
        <!-- <li>
          <details closed>
            <summary>
              Wait for the import process to complete (about 5 minutes)
            </summary>
            <div>
              <ol class="spaced">
                <li value="-">
                  You can view the progress by clicking "Data Logs"
                </li>
                <li value="-">
                  A message will appear when the process is complete
                </li>
                <li value="-" class="strong">
                  If you get an error, copy the error message and email it to your support contact
                </li>
              </ol> 
            </div>
          </details>
        </li> -->
      </li>
      </ol>
    </div>
  </div>
  <!-- end step 1 instructions  -->

    <div class="ui raised segment instructions attached">
      <div class="primary-content">
        <!-- REAL import button -->
        <!-- <button onclick='staging()'
          class="ui button violet">Import Data to Preview Site</button> -->
          <!-- temp/test import button  -->
          <button onclick="handleImportComplete()" class="ui button violet">
            Import Data to Preview Site
          </button>
        <!-- import logs  -->
          <details open style="margin-top: .5em">
            <summary>Import Logs</summary>
            <table cellpadding='0' cellspacing='0'>
              <tbody id='etl-log'></tbody>
            </table>
          </details>
        <!-- this will be a button you click when you're done with data import  -->
        <!-- <button class="ui button basic violet big"
        onclick="handleStepComplete('step-1', 'step-2')" style="margin-top: 15vh">Import Data to Preview Site</button> -->
      </div>
    </div> 
  </section>
  <!-- end step 1 content  -->
  
  <!-- step 2 content  -->
  <section id="step-2-content" class="hidden">
    <!-- step 2 instructions  -->
    <div class="ui attached message">
      <div class="header">
        Step 2: Preview the site
      </div>
      <em>
        Note: You must successfully complete Step One for this to work
      </em>
      <ol class="ui list">

          <!-- step 1  -->
          <li>
            <details closed>
              <summary>
                Click "Preview Site"
              </summary>
              <div>
                <ol class="spaced">
                  <li value="-">
                    You will be taken to a temporary version of RCR that displays the data you just imported from Airtable.
                  </li>
                  <li value="-">
                    The preview site shows <em>exactly</em> how the the final site will look, if you continue with this update process
                  </li>
                  <li value="-" class="strong">
                    If anything looks incorrect, correct the data on Airtable and start the import process again
                  </li>
                </ol> 
              </div>
            </details>
            </li>
          <!-- step 2 check errors  -->
          <li>
            <details closed>
              <summary>
                Review "Content Errors"
              </summary>
              <div>
                <ol class="spaced">
                  <li value="-">
                    If the automatic import process detected missing data fields, they will show up here
                  </li>
                  <li value="-" class="strong">
                    Fixing these errors is optional. You can still update the site.
                  </li>
                  <li value="-">
                    To fix content errors:
                    <ol>
                      <li value="-">
                        Go to Airtable and correct the data where indicated
                      </li>
                      <li value="-">
                        Go back to the "Import Data" step on this dashboard
                      </li>
                      <li value="-">
                        Follow the instructions to re-import the newly changed data 
                      </li>
                    </ol>
                  </li>
              </ol> 
            </div>
          </details>
          </li>

          <li>
            If you are satisfied with the preview site, click "Next Step"
          </li>
      </ol>
    </div>
  </div>
  <!-- end step 2 instructions  -->
    <div class="ui raised segment instructions attached">
      <div class="primary-content" style="display: flex">
        <div class="ui buttons">
          <!-- TODO: add preview link logic here  -->
          <button class="ui button violet"
            onclick="openPreviewSite()">
            <!-- onclick="handlePreviewComplete()"> -->
            Preview site
          </button>
          <div class="or"></div>
          <button 
            onclick="handleStepComplete('step-2', 'step-3')"
            class="ui grey button">Next step</button>
        </div>

        <details open>
          <summary>Content Errors</summary>
          <table cellpadding='0' cellspacing='0'
            style='margin-left:auto; margin-right:auto; font-size:16px; border-spacing: 10px 0;'>
            <tbody id='etl-validation'></tbody>
          </table>
        </details>
        <!-- <div class="update-buttons" style="display: flex; flex-direction: column"> -->

          <!-- <button class="ui button teal basic" style="justify-self: flex-end">
            
          </button> -->
        <!-- </div> -->

      </div>
    </div>
  </section>
  <!-- end step 2 content  -->
  
  <!-- step 3 content  -->
  <section id="step-3-content" class="hidden">
    <!-- step 3 instructions  -->
    <div class="ui attached message">
      <div class="header">
        Step 3: Update Live Site
      </div>
      <ol class="ui list">
        <li>
          If you're satisfied with the preview site, simply click "Update Live Site"
        </li>
        <li>
          You'll see a confirmation message when site has been updated
        </li>
        <li>
          View the live site, and celebrate!
        </li>
      </ol>
    </div>
  </div>
  <!-- end step 3 instructions  -->
    <div class="ui raised segment instructions attached">
      <div class="primary-content">
        
        <button class="ui violet button big"
          onclick="alert('Congrats! You updated the site!')">
          Update Live Site
        </button>

      </div>
    </div>
  </section>
  <!-- end step 3 content  -->

</main>

<script>

  $(document).ready(function() {
    
    // grabs all the "step" nodes
    const allSteps = [...document.getElementsByClassName('step')];

    // grab each individual step node
    const step1 = document.querySelector('#step-1')
    const step2 = document.querySelector('#step-2')
    const step3 = document.querySelector('#step-3')

    // shows the content for the active "step"
    // this will be either hardcoded, or passed in from the route
    allSteps.forEach((el) => { 
      if ([...el.classList].includes('active')) {
        $(`#${el.id}-content`).show();
      } 
    });

  });

  function onStepClick(id) {
    const step1 = document.querySelector('#step-1')
    const step2 = document.querySelector('#step-2')
    const step3 = document.querySelector('#step-3')
    const allSteps = [...document.getElementsByClassName('step')]

    // remove all active classes and hide all content 
    allSteps.forEach((el) => { 
        el.classList.remove('active'); 
        $(`#${el.id}-content`).hide();
      });
    
    // add "active" class and show corresponding content
    const selectedEl = document.getElementById(id);
    selectedEl.classList.add('active');
    $(`#${selectedEl.id}-content`).show();
  }

  function handleStepComplete(step, next) {
    $(`#${step}`).addClass('completed').removeClass('active');
    $(`#${step}-content`).hide();
    $(`#${next}`).addClass('active');
    $(`#${next}-content`).show();
  }

  async function handleImportComplete() {
    alert('Preview data import in progress');

    await setTimeout(function() {
      var hasConfirmed = confirm(
        'Preview data import complete! \n Press "okay" to continue to the next step')
    }, 1000)

    if (hasConfirmed === true) {
      $('#step-1').addClass('completed').removeClass('active')
      $('#step-1-content').hide();
      // make active
      $('#step-2').removeClass('disabled').addClass('active')
      $('#step-2-content').show();
    } else {
      return 
    }

    // setTimeout(function() {
      // mark complete
      // $('#step-1').addClass('completed').removeClass('active')
      // $('#step-1-content').hide();
      // // make active
      // $('#step-2').removeClass('disabled').addClass('active')
      // $('#step-2-content').show();
    // }, 1000)

  }

  // open preview site
  function openPreviewSite() {
    window.open("https://rosecityresource.streetroots.org", "_blank");
  }

  // go to final step 
  function handlePreviewComplete() {
    // mark complete
    $('#step-2').addClass('completed').removeClass('active')
    $('#step-2-content').hide();
    // make active
    $('#step-3').removeClass('disabled').addClass('active')
    $('#step-3-content').show();
  }

  // function handleDataComplete() {
  //   $('#step-1').addClass('completed').removeClass('active');
  //   $('#step-2').addClass('active')
    
  //   selectedEl.classList.add('active');
  //   $(`#${selectedEl.id}-content`).show();
  // }


</script>

</body>