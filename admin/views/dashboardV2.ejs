<%- include('./partials/head'); %>
<%- include ('./partials/navbar'); %>
<%- include('./partials/styles'); %>

<!-- icon options: question circle outline, info circle
  -->

<head>
  <script>

    async function fetchPgRows() {
      let data = await fetch(window.location.href + '/pg-rows')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchPgSpace() {
      let data = await fetch(window.location.href + '/pg-space')
        .catch(e => console.error(e))
      return await data == undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchLastUpdate() {
      let data = await fetch('/api/meta-information')
        .catch(e => console.error(e))
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    async function fetchEtlLogs() {
      let logs = await fetch(window.location.href + '/etl-log')
        .catch(e => console.error(e))
      return await logs === undefined ? '' : logs.json().catch(e => console.error(e));
    }

    function renderEtlLogs(logs) {
      if (logs == null) {
        return;
      }
      let div = document.getElementById('etl-log');
      div.innerHTML =
        logs.map(L => {
          let dt = new Date(L.time_stamp);
          return '<tr><td style="color: navy; min-width: 150px; border: none; padding:4">' + dt.toLocaleString() + '</td><td style="color:blue; border: none; padding:4;">' + L.message + '</td></tr>'
        }).join('')
    }

    async function fetchEtlStatus() {
      const status = await fetch(window.location.href + '/etl-status')
        .catch(e => console.error(e));
      return await status === undefined ? '' : status.json().catch(e => console.error(e));
    }

    function renderEtlStatus(status) {
      if (status == null) {
        return;
      }
      let div = document.getElementById('etl-status');
      if (status.etl_started.toLowerCase() === 'false') {
        /* Has NOT started */
        div.innerHTML = "<span>&nbsp;</span>"
      }
      else {
        /* HAS started */
        if (status.etl_ran_to_completion.toLowerCase() === 'false') {
          /* Has NOT completed */
          div.innerHTML = '<span>The Import to Preview process has started. Please allow up to 30 minutes for the process to complete.</span>';
        }
        else if (status.etl_ran_to_completion.toLowerCase() === 'true') {
          /* HAS completed */
          if (parseInt(status.minutes_since_last_log) > 60 * 48) {
            /* More than 24 hours ago */
            div.innerHTML = "<span>The Import to Preview process ran more than 48 hours ago. Please run it again, since the source data may have changed.</span>";
          }
          else {
            /* Less than 24 hours ago */
            if (parseInt(status.etl_staging_1_num_rows) < 1) {
              /* The staging table is empty */
              div.innerHTML = "<span>The preview data is empty. Please report this to the development team.</span>";
            }
            else {
              div.innerHTML = "<span style='font-size: 20px; font-family: 'Courier New', Courier, monospace;'>The preview data is imported successfully and is ready to be imported to the live site.</span>";
            }
          }
        }
      }

    }

    async function fetchDataValidationItems() {
      const data = await fetch(window.location.href + '/etl-validation')
        .catch(e => console.error(e));
      return await data === undefined ? '' : data.json().catch(e => console.error(e));
    }

    function renderValidationItems(items) {
      if (items == null) {
        return;
      }
      let div = document.getElementById('etl-validation');
      div.innerHTML =
        items.map(L => {
          return '<tr><td style="color: navy; white-space: nowrap; border: none; padding:4">' + L.test + '</td><td style="color:blue; border: none; padding:4;">' + L.details + '</td><td style="color:blue; border: none; padding:4;">' + L.id + '</td><td style="color:blue; border: none; padding:4;">' + L.listing + '</td></tr>'
        }).join('')
    }

    async function staging() {

      /* Prompt for confirmation */
      let confirmation = confirm("Import data to preview site?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to run import process...';

      /* Safety check to abort if ETL is in progress */
      const logs = await fetchEtlLogs();
      const hasStartMessage = (logs.filter(i => i.message === 'Python ETL Script Start')).length >= 1;
      const hasEndMessage = (logs.filter(i => i.message === 'Python ETL Script End')).length >= 1;
      if (hasStartMessage && !hasEndMessage) {
        document.getElementById('status').innerText = 'There is already an import in progress. Please allow up to 30 minutes for that process to complete.';
      }

      /* Trigger the ETL process to start */
      fetch(window.location.href + '?' + new URLSearchParams({ action: 'runetl' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerText = 'Failed to start import process'; })

      /* Query the server for ETL status on an interval */
      const stagingInterval = window.setInterval(async function () {

        /* Fetch and display ETL logs */
        const logs = await fetchEtlLogs();
        renderEtlLogs(logs);

        /* Update the status message */
        const jobStart = logs.filter(L => L.message === 'Job Start');
        const jobEnd = logs.filter(L => L.message === 'Python ETL Script End');
        const stagingFinalized = logs.filter(L => L.message === 'Finalize the staging table');
        if (stagingFinalized && stagingFinalized.length >= 1) {
          const items = await fetchDataValidationItems();
          renderValidationItems(items)
        }
        if (jobStart && jobStart.length >= 1) {
          document.getElementById('status').innerHTML = 'Import process is running...';
        }
        if (jobEnd && jobEnd.length >= 1) {
          const previewPage = [window.location.protocol, '//', window.location.host.replace(/\d+/, '3000'), '?datatable=staging'].join('');
          document.getElementById('status').innerHTML = '<span>&#10004;&nbsp;Successfully imported to the Preview Site!</span><br/> <a href="' + previewPage + '"target="_blank">Click to View Preview Site</a>';
          clearInterval(stagingInterval);
        }
      }, 4000)

    }

    async function production() {

      /* Prompt for confirmation */
      let confirmation = confirm("The LIVE SITE will be updated. Proceed?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to update production...';

      /* Trigger the production udpate process to start */
      const status = await fetch(window.location.href + '?' + new URLSearchParams({ action: 'runprod' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerHTML = '<span>&#10008;&nbsp;Failed to start import process</span>'; })

      /* Query the server for status on an interval */
      const prodInterval = window.setInterval(async function () {

        /* Check if the production table has been updated */
        let timestamp = await fetchLastUpdate();
        let friendlyTimestamp = new Date(timestamp).toLocaleString();
        document.getElementById('-time').innerText = friendlyTimestamp;

        /* Compare to see if this time is within 2 minutes of the current time */
        const currentTime = new Date(new Date().toISOString());
        const updatedTime = new Date(new Date(timestamp).toISOString());
        const minutesBetweenDates = (currentTime.getTime() - updatedTime.getTime()) / 60000;
        if (minutesBetweenDates < 2) {
          document.getElementById('status').innerHTML = "<span>&#10004;&nbsp;Successfully imported to the Live Site!</span>";
          clearInterval(prodInterval);
        }
      }, 2000)

    }

  </script>
  <style>

  </style>
</head>

<body class='container' id="dashboard">
  <% 
    
  let activeStep = "step-1";
  let completedSteps = [];
  let disabledSteps = [];

  %>
 
  <h1 class="ui header violet" style='text-align: center; width: 100%'>
    <div class="content">
      <i class="database icon"></i>
      Update Data
    </div>
    <div class="sub header">
      Need more  help? Check out the <a href="/admin/guide"> user guide!</a>
    </div>
  </h1>
  <details closed>
    <summary><strong>Instructions</strong></summary>
    <div style="font-family: 'Courier New', Courier, monospace; font-size: 14px;">
      Instructions: this admin page supports a two-step data import process from Airtables to Rose City Resource.<br>
      The flow is: <strong>Airtables --> Preview Site --> Live Site</strong><br>
      NOTE: the data must <em>first be imported to the Preview Site</em> before it can be imported to the Live Site.<br>
      Step 1) Import data from Airtable into Rose City Resource by choosing <em>Import Data to Preview Site</em><br>
      Step 2) Validate the preview data by testing the preview site. A link to preview the imported data will be
      provided.<br>
      Step 3) Import data from the preview site to the live site by choosing <em>Import Data to Live Site</em>
    </div>
  </details>

  <main>

  <div class="ui attached steps">

    <!-- upload  -->
    <div id="step-1" onclick="onStepClick(this.id)"
      class="step <%= activeStep === 'step-1' ? 'active' : '' %>">
      <i class="cloud upload icon"></i>
      <div class="content">
        <div class="title">Import Data</div>
        <div class="description"></div>
      </div>
    </div>
    <div id="step-2" onclick="onStepClick(this.id)"
      class="step 
      <%= activeStep === 'step-2' ? 'active' : '' %> 
      <%= disabledSteps.includes('step-2') ? 'disabled' : ''%> 
      <%= completedSteps.includes('step-2') ? 'completed' : ''%>">
      <i class="eye icon"></i>
      <div class="content">
        <div class="title">Preview Site</div>
      </div>
    </div>
    <div id="step-3" onclick="onStepClick(this.id)"
      class="step 
      <%= activeStep === 'step-3' ? 'active' : '' %> 
      <%= disabledSteps.includes('step-3') ? 'disabled' : ''%> 
      <%= completedSteps.includes('step-3') ? 'completed' : ''%>">
      <i class="sync icon"></i>
      <div class="content">
        <div class="title">Update Site</div>
      </div>
    </div>
  </div>

  <section id="step-1-content" class="hidden" style="display: flex; justify-content: flex-start;">
    <div class="ui raised segment attached">

      <div class="instructions" style="max-width: 40%">

      <h3>
        Instructions
      </h3>
      <p>
        Updating the Rose City Resource live site is a three step process. 
      </p>
      <p>
        Note: this guide assumes that the data in Airtable has been reviewed and formatted appropriately. Please double check for misspellings or missing fields before beginning the import process.
      </p>
      <p>
        Step 1: Import Data from Airtable
      </p>
      <p>
        This step is straightforward. Just triple check that the information on Airtable is accurate, correct, and ready to be deployed on the live site. Then, click "Update Preview Site."
      </p>
      <p>
        This process takes about 5 minutes total, since the data needs to go through some formatting to get it ready to be displayed on the site. 
      </p>
      <p>
        If there are any errors, they'll show up in the "Errors" box. 
      </p>
      <p>
        [Give them instructions for what they should do upon seeing errors.]
      </p>
      <p>
        Once the data has successfully been imported, you'll see a message that allows you to go onto the next step: previewing the data on the preview site. 
      </p>

      <p>
        Step 2: Preview new data on the preview site
      </p>
      <p>
        Click this link to go to a "preview" version of the Rose City Resource Guide. It will have your new data loaded up into it, but it isn't live yet. You still have time to make changes if you spot errors in the data. 
      </p>
      <p>
        Go to different pages on the preview site and search for a few different keywords and categories, just to make sure the new data looks correct. 
      </p>
      <p>
        [If you run into errors...] (TODO)
      </p>
      <p>
        If the preview is correct, press "Update Live Site," and your data will be pushed to the live site 
      </p>

      <p>

      </p>



      <br />
    </div>

      
      <button class="ui button basic violet" onclick="handleStepComplete('step-1', 'step-2')">Step Completed</button>
    </div>
    
  </section>
  
  <section id="step-2-content" class="hidden">
    <div class="ui raised segment attached">

      <h3>
        Preview instructions
      </h3>
      <br />

      <button class="ui button basic teal"
        onclick="handleStepComplete('step-2', 'step-3')">
        Step Completed</button>
    </div>
  </section>
  
  <section id="step-3-content" class="hidden">
    <div class="ui raised segment attached">

      <h3>
        Live site update instructions
      </h3>
      <br />

      <button class="ui button basic blue"
        onclick="alert('Congrats! You updated the site!')">Update Live Site</button>
    </div>
  </section>


</main>

<script>

  $(document).ready(function() {
    
    // grabs all the "step" nodes
    const allSteps = [...document.getElementsByClassName('step')];

    // grab each individual step node
    const info = document.querySelector('#info')
    const step1 = document.querySelector('#step-1')
    const step2 = document.querySelector('#step-2')
    const step3 = document.querySelector('#step-3')

    // shows the content for the active "step"
    // this will be either hardcoded, or passed in from the route
    allSteps.forEach((el) => { 
      if ([...el.classList].includes('active')) {
        $(`#${el.id}-content`).show();
      } 
    });

  });

  function onStepClick(id) {
    const info = document.querySelector('#info')
    const step1 = document.querySelector('#step-1')
    const step2 = document.querySelector('#step-2')
    const step3 = document.querySelector('#step-3')
    const allSteps = [...document.getElementsByClassName('step')]

    // remove all active classes and hide all content 
    allSteps.forEach((el) => { 
        el.classList.remove('active'); 
        $(`#${el.id}-content`).hide();
      });
    
    // add "active" class and show corresponding content
    const selectedEl = document.getElementById(id);
    selectedEl.classList.add('active');
    $(`#${selectedEl.id}-content`).show();
  }

  function handleStepComplete(step, next) {
    $(`#${step}`).addClass('completed').removeClass('active');
    $(`#${step}-content`).hide();
    $(`#${next}`).addClass('active');
    $(`#${next}-content`).show();
  }

  // function handleDataComplete() {
  //   $('#step-1').addClass('completed').removeClass('active');
  //   $('#step-2').addClass('active')
    
  //   selectedEl.classList.add('active');
  //   $(`#${selectedEl.id}-content`).show();
  // }


</script>

</body>