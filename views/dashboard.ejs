<head>
  <title>Rose City Resource Admin Page</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/skeleton/2.0.4/skeleton.css" />
  <script>

    async function fetchPgRows() {
      let data = await fetch(window.location.href + '/pg-rows')
        .catch(e => console.log(e))
      return await data === undefined ? '' : data.json().catch(e => console.log(e));
    }

    async function fetchPgSpace() {
      let data = await fetch(window.location.href + '/pg-space')
        .catch(e => console.log(e))
      return await data == undefined ? '' : data.json().catch(e => console.log(e));
    }

    async function fetchLastUpdate() {
      let data = await fetch('/api/last-update')
        .catch(e => console.log(e))
      return await data === undefined ? '' : data.json().catch(e => console.log(e));
    }

    async function fetchEtlLogs() {
      let logs = await fetch(window.location.href + '/etl-log')
        .catch(e => console.log(e))
      return await logs === undefined ? '' : logs.json().catch(e => console.log(e));
    }

    function renderEtlLogs(logs) {
      if (logs == null) {
        return;
      }
      let div = document.getElementById('etl-log');
      div.innerHTML =
        logs.map(L => {
          let dt = new Date(L.time_stamp);
          return '<tr><td style="color: navy; min-width: 150px; border: none; padding:4">' + dt.toLocaleString() + '</td><td style="color:blue; border: none; padding:4;">' + L.message + '</td></tr>'
        }).join('')
    }

    async function fetchEtlStatus() {
      const status = await fetch(window.location.href + '/etl-status')
        .catch(e => console.log(e));
      return await status === undefined ? '' : status.json().catch(e => console.log(e));
    }

    function renderEtlStatus(status) {
      if (status == null) {
        return;
      }
      let div = document.getElementById('etl-status');
      if (status.etl_started.toLowerCase() === 'false') {
        /* Has NOT started */
        div.innerHTML = "<span>&nbsp;</span>"
      }
      else {
        /* HAS started */
        if (status.etl_ran_to_completion.toLowerCase() === 'false') {
          /* Has NOT completed */
          div.innerHTML = '<span>The ETL process has started. Please allow up to 30 minutes for the process to complete.</span>';
        }
        else if (status.etl_ran_to_completion.toLowerCase() === 'true') {
          /* HAS completed */
          if (parseInt(status.minutes_since_last_log) > 60 * 48) {
            /* More than 24 hours ago */
            div.innerHTML = "<span>The ETL process ran more than 48 hours ago. Please run it again, since the source data may have changed.</span>";
          }
          else {
            /* Less than 24 hours ago */
            if (parseInt(status.etl_staging_1_num_rows) < 1) {
              /* The staging table is empty */
              div.innerHTML = "<span>The preview data is empty. Please report this to the MAC development team.</span>";
            }
            else {
              div.innerHTML = "<span style='font-size: 20px; font-family: 'Courier New', Courier, monospace;'>The preview data is imported successfully and is ready to be imported to the live site.</span>";
            }
          }
        }
      }

    }

    async function fetchDataValidationItems() {
      const data = await fetch(window.location.href + '/etl-validation')
        .catch(e => console.log(e));
      return await data === undefined ? '' : data.json().catch(e => console.log(e));
    }

    function renderValidationItems(items) {
      if (items == null) {
        return;
      }
      let div = document.getElementById('etl-validation');
      div.innerHTML =
        items.map(L => {
          return '<tr><td style="color: navy; white-space: nowrap; border: none; padding:4">' + L.test + '</td><td style="color:blue; border: none; padding:4;">' + L.details + '</td><td style="color:blue; border: none; padding:4;">' + L.id + '</td><td style="color:blue; border: none; padding:4;">' + L.listing + '</td></tr>'
        }).join('')
    }

    async function staging() {

      /* Prompt for confirmation */
      let confirmation = confirm("Import data to preview site?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to run import process...';

      /* Safety check to abort if ETL is in progress */
      const logs = await fetchEtlLogs();
      const hasStartMessage = (logs.filter(i => i.message === 'Python ETL Script Start')).length >= 1;
      const hasEndMessage = (logs.filter(i => i.message === 'Python ETL Script End')).length >= 1;
      if (hasStartMessage && !hasEndMessage) {
        document.getElementById('status').innerText = 'There is already an import in progress. Please allow up to 30 minutes for that process to complete.';
      }

      /* Trigger the ETL process to start */
      fetch(window.location.href + '?' + new URLSearchParams({ action: 'runetl' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerText = 'Failed to start import process'; })

      /* Query the server for ETL status on an interval */
      var stagingInterval = window.setInterval(async function () {

        /* Fetch and display ETL logs */
        const logs = await fetchEtlLogs();
        renderEtlLogs(logs);

        /* Update the status message */
        const jobStart = logs.filter(L => L.message === 'Job Start');
        const jobEnd = logs.filter(L => L.message === 'Python ETL Script End');
        const stagingFinalized = logs.filter(L => L.message === 'Finalize the staging table');
        if (stagingFinalized && stagingFinalized.length >= 1) {
          const items = await fetchDataValidationItems();
          renderValidationItems(items)
        }
        if (jobStart && jobStart.length >= 1) {
          document.getElementById('status').innerHTML = 'Import process is running...';
        }
        if (jobEnd && jobEnd.length >= 1) {
          const previewPage = [window.location.protocol, '//', window.location.host.replace(/\d+/, '3000'), '?datatable=staging'].join('');
          document.getElementById('status').innerHTML = '<span>&#10004;&nbsp;Successfully imported to the Preview Site!</span><br/> <a href="' + previewPage + '"target="_blank">Click to View Preview Site</a>';
          clearInterval(stagingInterval);
        }
      }, 4000)

    }

    async function production() {

      /* Prompt for confirmation */
      let confirmation = confirm("The LIVE SITE will be updated. Proceed?");
      if (confirmation == false) { return; }
      document.getElementById('status').innerText = 'Preparing to update production...';

      /* Trigger the production udpate process to start */
      const status = await fetch(window.location.href + '?' + new URLSearchParams({ action: 'runprod' }), { method: 'GET' })
        .catch(e => { document.getElementById('status').innerHTML = '<span>&#10008;&nbsp;Failed to start import process</span>'; })

      /* Query the server for status on an interval */
      var prodInterval = window.setInterval(async function () {

        /* Check if the production table has been updated */
        let timestamp = await fetchLastUpdate();
        let friendlyTimestamp = new Date(timestamp).toLocaleString();
        document.getElementById('last-update-time').innerText = friendlyTimestamp;

        /* Compare to see if this time is within 2 minutes of the current time */
        const currentTime = new Date(new Date().toISOString());
        const updatedTime = new Date(new Date(timestamp).toISOString());
        const minutesBetweenDates = (currentTime.getTime() - updatedTime.getTime()) / 60000;
        if (minutesBetweenDates < 2) {
          document.getElementById('status').innerHTML = "<span>&#10004;&nbsp;Successfully imported to the Live Site!</span>";
          clearInterval(prodInterval);
        }
      }, 2000)

    }
  </script>
</head>

<body class='container' style='text-align: center; width: 100%;'>
  <!-- Top Nav  -->
  <nav>
    <div style="padding-bottom: 10px; padding-top: 15px;">
      <a href="/admin/changePassword" 
        style="
        text-align: center;
        padding: 10px 16px;
        font-size: 17px;
        ">
        Change Password</a> |
      <a href="/admin/register"
        style="
        text-align: center;
        padding: 10px 16px;
        font-size: 17px;
        ">
        Create User</a> |
      <a href="/admin/logout"
        style="
        text-align: center;
        padding: 10px 16px;
        font-size: 17px;">
        Logout</a>
    </div>
    </nav>
  <h1>RCR Admin Dashboard</h1>
  <div style='border: 1px solid grey; border-radius: 5px; margin: auto; width: 50%; padding: 10px 20px;'>
    <div><em>Live Site Last Update: <span id='last-update-time'>&nbsp;</span></em></div>
    <div><span>Database Rows in Use: </span><span id='database-rows'>&nbsp;</span><span> / 10,000</span></div>
    <div><span>Database Space in Use: </span><span id='database-space'>&nbsp;</span><span> / 1 GB</span></div>
  </div>
  <br />
  <details closed>
    <summary><strong>Instructions</strong></summary>
    <div style="font-family: 'Courier New', Courier, monospace; font-size: 14px;">
      Instructions: this admin page supports a two-step data import process from Airtables to Rose City Resource.<br>
      The flow is: <strong>Airtables --> Preview Site --> Live Site</strong><br>
      NOTE: the data must <em>first be imported to the Preview Site</em> before it can be imported to the Live Site.<br>
      Step 1) Import data from Airtable into Rose City Resource by choosing <em>Import Data to Preview Site</em><br>
      Step 2) Validate the preview data by testing the preview site. A link to preview the imported data will be
      provided.<br>
      Step 3) Import data from the preview site to the live site by choosing <em>Import Data to Live Site</em>
    </div>
  </details>
  <br />
  <button onclick='staging()'>Import Data to Preview Site</button>
  <br />
  <div class="preview-div">
    <span class="preview-span" id='status'></span>
  </div>
  <br />
  <button disabled id='import-live' onclick='production()'>Import Data to Live Site</button>
  <br />
  <br />
  <div id='etl-status' style='color:gray; border: 1px dashed lightgray'>&nbsp;</div>
  <br />
  <details open>
    <summary>Data Validation Errors</summary>
    <table cellpadding='0' cellspacing='0'
      style='margin-left:auto; margin-right:auto; font-size:16px; font-family:monospace; border-spacing: 10px 0;'>
      <tbody id='etl-validation'></tbody>
    </table>
  </details>
  <br>
  <details open>
    <summary>Logs</summary>
    <table cellpadding='0' cellspacing='0'
      style='margin-left:auto; margin-right:auto; font-size:16px; font-family:monospace; border-spacing: 10px 0;'>
      <tbody id='etl-log'></tbody>
    </table>
  </details>
  <script>
    (async () => {
      /* One-time Updates on page load */

      /* Fetch and display ETL logs */
      renderEtlLogs(await fetchEtlLogs());

      const rowsRes = await fetchPgRows();
      const rows = rowsRes[0].get_database_numrows;
      const spaceRes = await fetchPgSpace();
      const space = spaceRes[0].get_database_size;
      const timeRes = await fetchLastUpdate();
      const time = new Date(timeRes).toLocaleString();
      document.getElementById('database-rows').innerText = rows;
      document.getElementById('database-space').innerText = space;
      document.getElementById('last-update-time').innerText = time;

      /* Continuous update on timer */
      window.setInterval(async function () {

        /* Fetch and display ETL status */
        const statusArr = await fetchEtlStatus();
        const status = statusArr[0];
        renderEtlStatus(status);

        /* Enable import to live site button if that should be an option */
        const started = status.etl_started.toLowerCase();
        const completed = status.etl_ran_to_completion.toLowerCase();
        const minutes = parseInt(status.minutes_since_last_log);
        const numrows = parseInt(status.etl_staging_1_num_rows);
        if (started === 'true' && completed === 'true' && minutes < 60 * 48 && numrows > 1) {
          const button = document.getElementById('import-live').disabled = false;
        }
        else {
          const button = document.getElementById('import-live').disabled = true;
        }

      }, 5000)
    })();
  </script>

</body>